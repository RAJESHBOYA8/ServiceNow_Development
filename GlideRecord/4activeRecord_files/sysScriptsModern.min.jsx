/*! RESOURCE: /scripts/sysScriptsModern.min.js */
function addDeclarations(declarations) {
	var GlideEditor = GlideEditorMonaco.get('script');
	var modelId = GlideEditorMonaco.get('script').editor.getModel().id;
	GlideEditor.editorLibraryDisposables.forEach(function(library) {
		library.dispose();
	});
	GlideEditor.addDeclarations(declarations, modelId);
}
function loadScopeTypeDefs(scopeName) {
	var completionsUrl = "/api/now/v1/syntax_editor/completions";
	var libAdder = function(response) {
		addDeclarations(JSON.parse(response).result.result);
	};
	var url = completionsUrl + '?scope=' + scopeName;
	fetchCompletions(url, libAdder, function(){}, g_ck);
}
function setScriptLinks() {
	var runLinks = document.querySelectorAll('a.app-scriptlink-run');
	var viewLinks = document.querySelectorAll('a.app-scriptlink-view');
	setLinks(runLinks, 'run_message');
	setLinks(viewLinks, 'view');
	function setLinks(nodes, action) {
		for (var i = 0; i < nodes.length; i++) {
			var node = nodes[i];
			var scriptName = node.getAttribute('data-script-name');
			var scriptPlugin = node.getAttribute('data-script-plugin');
			var dangerousScript = node.getAttribute('data-script-dangerous') === 'true';
			var scriptBlocked = node.getAttribute('data-script-blocked') === 'true';
			if (dangerousScript)
				action = 'warn_before';
			if (!scriptBlocked) {
				node.setAttribute(
					'href',
					'sys.scripts.do?script=' + scriptName +'&plugin=' + scriptPlugin + '&sysparm_ck=' + window.g_ck + '&action=' + action
				);
			}
		}
	}
}
function toggleableScripts() {
	var nodes = document.querySelectorAll('.script-list-toggleable');
	for (var i = 0; i < nodes.length; i++) {
		var node = nodes[i];
		node.addEventListener('click', function (e) {
			var scripts = e.target;
			if (scripts.hasClassName('script-list-hidden')) {
				scripts.removeClassName('script-list-hidden');
				scripts.addClassName('script-list-visible');
			} else if (scripts.hasClassName('script-list-visible')) {
				scripts.removeClassName('script-list-visible');
				scripts.addClassName('script-list-hidden');
			}
		});
	}
}
function setEsLintBasedOnScopeVersion(scopeSysId) {
	var monaco = GlideEditorMonaco.get('script');
	monaco.eslintConfig = scopeToLevel[scopeSysId] === 'ES_LATEST' ? lintConfigEsLatest : lintConfigStandard;
	monaco.toggleLinter();
	monaco.toggleLinter();
}
function loadForMonaco() {
	var textArea = document.querySelector('[id=".do"] #script');
	var scopeSelector = document.querySelector('[name=sys_scope]');
	var initScopeName = scopeSelector.options[scopeSelector.selectedIndex].text;
	window.g_scratchpad['scope'] = initScopeName;
	scopeSelector.addEventListener('change', function(evt) {
		var target = evt.target;
		var scopeName = target.options[target.selectedIndex].text;
		var scopeSysId = target.options[target.selectedIndex].value;
		GlideEditorMonaco.get('script').options.scope = scopeName;
		loadScopeTypeDefs(scopeName);
		setEsLintBasedOnScopeVersion(scopeSysId);
	});
	var form = document.getElementById('.do');
	form.addEventListener('submit', function(e) {
		window.CustomEvent.fireAll('form.isModified', false)
		textArea.value = window.monaco.editor.getEditors()[0].getValue();
	});
}
function loadForCodeMirror() {
	var form = document.getElementById('.do');
	form.addEventListener('submit', function(e) {
		window.CustomEvent.fireAll('form.isModified', false)
	});
}
function loadEditor() {
	if (window.monaco) {
		loadForMonaco();
	} else {
		loadForCodeMirror();
	}
	setScriptLinks();
	toggleableScripts();
}
window.onload = loadEditor;
