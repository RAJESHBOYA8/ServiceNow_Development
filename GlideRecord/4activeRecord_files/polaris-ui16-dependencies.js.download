/*! RESOURCE: /scripts/doctype/CustomEventManager.js */
var NOW = NOW || {};
var CustomEventManager = (function (existingCustomEvent) {
	"use strict";
	var events = (existingCustomEvent && existingCustomEvent.events) || {};
	var isFiringFlag = false;
	var trace = false;
	var suppressEvents = false;
	var NOW_MSG = 'NOW.PostMessage';
	var g_concourse_onmessage_enforce_same_origin = 'true'.toLowerCase() === 'true';
	var g_concourse_onmessage_enforce_same_origin_whitelist = '';
	function observe(eventName, fn){
		if (trace)
			jslog("$CustomEventManager observing: " + eventName);
		on(eventName, fn);
	}
	function on(name, func) {
		if (!func || typeof func !== 'function')
			return;
		if (typeof name === 'undefined')
			return;
		if (!events[name])
			events[name] = [];
		events[name].push(func);
	}
	function un(name, func) {
		if (!events[name])
			return;
		var idx = -1;
		for (var i = 0; i < events[name].length; i++) {
			if (events[name][i] === func) {
				idx = i;
				break;
			}
		}
		if (idx >= 0)
			events[name].splice(idx, 1)
	}
	function unAll(name) {
		if (events[name])
			delete events[name];
	}
	function fire(eventName, args){
		if (trace)
			jslog("$CustomEventManager firing: " + eventName + " args: " + arguments.length);
		return fireEvent.apply(null, arguments);
	}
	function fireUp(eventName, args){
		var win = window;
		while (win){
			try {
				if (win.CustomEvent.fireEvent.apply(null, arguments) === false)
					return;
				win = win.parent === win ? null : win.parent;
			}catch(e){
				return;
			}
		}
	}
	function fireEvent() {
		if (suppressEvents)
			return true;
		var args = Array.prototype.slice.apply(arguments);
		var name = args.shift();
		var eventList = events[name];
		if (!eventList)
			return true;
		var event = eventList.slice();
		isFiringFlag = true;
for (var i = 0, l = event.length; i < l; i++) {
			var ev = event[i];
			if (!ev)
				continue;
			if (ev.apply(null, args) === false) {
				isFiringFlag = false;
				return false;
			}
		}
		isFiringFlag = false;
		return true;
	}
	function isFiring() {
		return isFiringFlag;
	}
	function forward(name, element, func) {
		on(name, func);
		element.addEventListener(name, function(e) {
			fireEvent(e.type, this, e);
		}.bind(api));
	}
	function isOriginInWhiteList(origin, whitelistStr) {
		if (!whitelistStr) {
			return false;
		}
var delimiterRegex = /[\n, ]/;
		var whitelist = whitelistStr.split(delimiterRegex)
			.filter(function(whiteListedOrigin) {
				return whiteListedOrigin;
			})
			.map(function(whiteListedOrigin) {
				return whiteListedOrigin.toLowerCase();
			});
		if (~whitelist.indexOf(origin.toLowerCase())) {
			return true;
		}
		return false;
	}
	function shouldProcessMessage(sourceOrigin) {
		if (!g_concourse_onmessage_enforce_same_origin || sourceOrigin === window.location.origin) {
			return true;
		}
		return isOriginInWhiteList(sourceOrigin, g_concourse_onmessage_enforce_same_origin_whitelist);
	}
    function registerPostMessageEvent() {
        if (NOW.registeredPostMessageEvent) {
            return;
        }
        if (!window.postMessage) {
            return;
        }
        window.addEventListener('message', function (event) {
            if (!shouldProcessMessage(event.origin)) {
                console.warn('Incoming message ignored due to origin mismatch.');
                return;
            }
            var nowMessageJSON = event.data;
            var nowMessage;
            try {
                nowMessage = JSON.parse(nowMessageJSON.toString());
            } catch (e) {
                return;
            }
            if (!nowMessage.type == NOW_MSG) {
                return;
            }
            fire(nowMessage.eventName, nowMessage.args);
        }, false);
        NOW.registeredPostMessageEvent = true;
    }
	function doPostMessage(win, event, msg, targetOrigin) {
		var nowMessage = {type: NOW_MSG, eventName: event, args: msg};
		var nowMessageJSON;
		if (!win || !win.postMessage) {
			return
		}
		nowMessageJSON = JSON.stringify(nowMessage);
		win.postMessage(nowMessageJSON, targetOrigin);
	}
	function fireTop(eventName, args){
		if (trace)
			jslog("$CustomEventManager firing: " + eventName + " args: " + arguments.length);
		fireEvent.apply(null, arguments);
		var t = getTopWindow();
		if (t !== null && window !== t)
			t.CustomEvent.fire(eventName, args);
	}
	function fireAll(eventName, args) {
		if (trace)
			jslog("$CustomEventManager firing: " + eventName + " args: " + arguments.length);
		var topWindow = getTopWindow();
		if (topWindow !== window.self)
			CustomEvent.fireEvent(eventName, args);
		notifyAllFrom(topWindow);
		function notifyAllFrom(rootFrame) {
			var childFrame;
			rootFrame.CustomEvent.fireEvent(eventName, args);
			for (var i = 0; i < rootFrame.frames.length; i++) {
				try {
					childFrame = rootFrame.frames[i];
					if (!childFrame)
						continue;
					if (childFrame.CustomEvent && typeof childFrame.CustomEvent.fireEvent === "function") {
						notifyAllFrom(childFrame);
					}
				} catch(e) {
				}
			}
		}
	}
	function fireToWindow(targetWindow, eventName, args, usePostMessage, targetOrigin) {
		if (trace)
			jslog("$CustomEventManager firing: " + eventName + " args: " + args.length);
		if (usePostMessage) {
			doPostMessage(targetWindow, eventName, args, targetOrigin);
		} else {
			targetWindow.CustomEvent.fireEvent(eventName, args);
		}
	}
	function getTopWindow() {
		var topWindow = window.self;
		try {
			while (topWindow.CustomEvent.fireEvent && topWindow !== topWindow.parent && topWindow.parent.CustomEvent.fireEvent) {
				topWindow = topWindow.parent;
			}
		} catch (e) {}
		return topWindow;
	}
	function isTopWindow() {
		return getTopWindow() == window.self;
	}
	function jslog(msg, src, dateTime) {
		try {
			if (!src) {
				var path = window.self.location.pathname;
src = path.substring(path.lastIndexOf('/') + 1);
			}
			if (window.self.opener && window != window.self.opener) {
				if (window.self.opener.jslog) {
					window.self.opener.jslog(msg, src, dateTime);
				}
			} else if (parent && parent.jslog && jslog != parent.jslog) {
				parent.jslog(msg, src, dateTime);
			} else {
				if (window.console && window.console.log)
					console.log(msg);
			}
		} catch (e) {
		}
	}
	var api =  {
		set trace(value) {
			trace = !!value;
		},
		get trace() {
			return trace;
		},
		set suppressEvents(value) {
			suppressEvents = !!value;
		},
		get suppressEvents() {
			return suppressEvents;
		},
		get events() {
			return events;
		},
		set events(value) {
			events = value;
		},
		on: on,
		un: un,
		unAll: unAll,
		forward: forward,
		isFiring: isFiring,
		fireEvent: fireEvent,
		observe: observe,
		fire: fire,
		fireTop: fireTop,
		fireAll: fireAll,
		fireToWindow: fireToWindow,
		isTopWindow: isTopWindow,
		fireUp: fireUp,
		toString: function() { return 'CustomEventManager'; }
	};
	registerPostMessageEvent();
	return api;
})(NOW.CustomEvent);
NOW.CustomEvent = CustomEventManager;
if (typeof CustomEvent !== "undefined") {
	CustomEvent.observe = NOW.CustomEvent.observe.bind(NOW.CustomEvent);
	CustomEvent.fire = NOW.CustomEvent.fire.bind(NOW.CustomEvent);
	CustomEvent.fireUp = NOW.CustomEvent.fireUp.bind(NOW.CustomEvent);
	CustomEvent.fireTop = NOW.CustomEvent.fireTop.bind(NOW.CustomEvent);
	CustomEvent.fireAll = NOW.CustomEvent.fireAll.bind(NOW.CustomEvent);
	CustomEvent.fireToWindow = NOW.CustomEvent.fireToWindow.bind(NOW.CustomEvent);
	CustomEvent.on = NOW.CustomEvent.on.bind(NOW.CustomEvent);
	CustomEvent.un = NOW.CustomEvent.un.bind(NOW.CustomEvent);
	CustomEvent.unAll = NOW.CustomEvent.unAll.bind(NOW.CustomEvent);
	CustomEvent.forward = NOW.CustomEvent.forward.bind(NOW.CustomEvent);
	CustomEvent.isFiring = NOW.CustomEvent.isFiring.bind(NOW.CustomEvent);
	CustomEvent.fireEvent = NOW.CustomEvent.fireEvent.bind(NOW.CustomEvent);
	CustomEvent.events = NOW.CustomEvent.events;
	CustomEvent.isTopWindow = NOW.CustomEvent.isTopWindow.bind(NOW.CustomEvent);
} else {
	window.CustomEvent = NOW.CustomEvent;
}
;
/*! RESOURCE: /scripts/scriptDebugger/launchScriptDebugger.js */
var launchScriptDebuggerOK = true;
window.top.launchScriptDebugger = function(id, type, field, debuggerState) {
    function _launch() {
        var width = window.innerWidth - 40,
        height = window.innerHeight,
        x = window.screenX + 20,
        y = window.screenY + 20,
        features = 'width=' + width + ',height=' + height + ',toolbar=no,status=no,directories=no,menubar=no,resizable=yes,screenX=' + x +',left='+ x +',screenY='+ y +',top='+ y;
        var debuggerWind = window.open('', 'sn_ScriptDebugger', features),
        prevFullUrl = debuggerWind.location.href,
        reload = false;
        if (prevFullUrl === 'about:blank') {
            try {
                var storedTime = localStorage.getItem('sn_ScriptDebugger'),
                currentTime = new Date().getTime();
                if (storedTime && 60000 > currentTime - storedTime) {
                debuggerWind.close();
                localStorage.setItem('sn_ScriptDebuggerExist_ShowNotification', new Date().getTime());
                return;
                }
            }
            catch (e) {
            }
reload = true;
        }
var url = '/$jsdebugger.do?sysparm_nostack=true';
        if (id && type && field) {
url = '/$jsdebugger.do?scriptId=' + id + '&scriptType=' + type + '&scriptField=' + field + '&sysparm_nostack=true';
            if (!reload) {
                try {
                    localStorage.setItem('sn_ScriptDebugger_url', url);
                }
                catch (e) {
                }
                finally {
var prevUrl = prevFullUrl.slice(prevFullUrl.indexOf('/$jsdebugger.do'));
                    if (prevUrl != url)
                        reload = true;
                }
            }
        }
        var sessionLogType = debuggerState && debuggerState.sessionLog && debuggerState.sessionLog.type;
        if (sessionLogType) {
url = '/$jsdebugger.do?logType=' + debuggerState.sessionLog.type;
            if(debuggerState.sessionLog.disable) {
            url = url + '&disableType=true';
            }
            url = url + '&sysparm_nostack=true';
            reload = true;
        }
        
        var scriptTracerTab = debuggerState && debuggerState.scriptTracer;
        if (scriptTracerTab) {
url = '/$jsdebugger.do?scriptTracer=true'
            url = url + '&sysparm_nostack=true';
            reload = true;
        }
        if (reload) {
            debuggerWind = window.open(url, 'sn_ScriptDebugger', features);
        }
        debuggerWind.focus();
        debuggerWind.setTimeout(focus, 1);
    }
    if (launchScriptDebuggerOK) {
        launchScriptDebuggerOK = false;
        try {_launch();}
        catch(e) {
        }
        launchScriptDebuggerOK = true;
    }
};
;
/*! RESOURCE: /scripts/dev-studio/dev-studio-launcher.js */
var initDevStudioLauncher = function(win, openMode, isPolarisExperienceEnabled) {
    'use strict';
    var openStudioWindows = {};
    var launchDebounced = debounce(launch, 200);
    return {
        launch: function() {
            try {
                launchDebounced();
            } catch (e) {
                console && console.warn('Could not launch Studio: ' + e.message);
            }
        },
        getAllWindows: function() {
            return openStudioWindows;
        },
        getWindow: function(name) {
            return openStudioWindows[name];
        },
        addWindow: function(name, ref) {
            openStudioWindows[name] = ref;
            addUnloadHandler(name);
        },
        isOpen: function(name) {
            return isOpen(name);
        },
        navigatedAway: function(name) {
            return navigatedAway(name);
        }
    };
    function debounce(func, wait) {
        var timeout;
        return function() {
            var now = !timeout;
            clearTimeout(timeout);
            timeout = setTimeout(function() {
                timeout = null;
            }, wait);
            if (now) func.apply(this, arguments);
        };
    }
    function launch() {
        var width = win.top.innerWidth - 40,
            height = win.top.innerHeight,
            x = win.top.screenX + 20,
            y = win.top.screenY + 20,
            studioUrl = '$studio.do?sysparm_nostack=true&sysparm_transaction_scope=global';
            if(isPolarisExperienceEnabled){
                studioUrl = studioUrl + '&sysparm_use_polaris=true';
            }
            features = 'width=' + width + ',height=' + height +
                ',toolbar=no,status=no,directories=no,menubar=no,resizable=yes,scrollbars=1,screenX=' +
                x + ',left='+ x +',screenY='+ y +',top='+ y,
            winName = 'studio';
        if (!isOpen(winName) || navigatedAway(winName)) {
            openStudioWindows[winName] = (openMode === 'tab')
                ? openTab(studioUrl)
                : openWindow(winName, studioUrl, features);
            addUnloadHandler(winName);
        }
        focusWindow(winName);
        if (typeof GlideUXMetrics !== 'undefined' && GlideUXMetrics && GlideUXMetrics.track) {
            GlideUXMetrics.track("USER_NAVIGATE", {
                meta : { 
                    url: studioUrl, 
                    pageTitle: winName,
                } 
              });
        } else {
            console.warn('GlideUXMetrics not setup');
            console.warn('\tFailed to track: ', eventName, '\nData: ', eventData);
        }
    }
    function openTab(url) {
        return win.open(url);
    }
    function openWindow(name, url, opts) {
        return win.open(url, name, opts);
    }
    function addUnloadHandler(name) {
        openStudioWindows[name] && openStudioWindows[name].addEventListener('beforeunload', function rem(e) {
            openStudioWindows[name].removeEventListener('beforeunload', rem);
            delete openStudioWindows[name];
        });
    }
    function focusWindow(name) {
        openStudioWindows[name].focus();
    }
    function isOpen(name) {
        return openStudioWindows[name] && !openStudioWindows[name].closed;
    }
    function navigatedAway(name) {
        try {
return openStudioWindows[name] && openStudioWindows[name].location.pathname !== '/$studio.do';
        } catch(e) {
            return true;
        }
    }
};
;
/*! RESOURCE: /scripts/concourse/deprecated.js */
"use strict";
function alertDeprecated(oldFnName, newName){
	if (console && console.warn) {
		console.warn("WARNING! Deprecated function called. The global function '" + oldFnName + "' has been deprecated, please use '" + newName + "' from your application's context instead.");
	}
}
var g_application_picker = {
	fillApplications : function() {
		CustomEvent.fireTop('sn:refresh_application_picker');
	}
};
function popupOpenFocus(url, name, pWidth, pHeight, features, snapToLastMousePosition, closeOnLoseFocus) {
	alertDeprecated("popupOpenFocus()", "window.g_navigation.openPopup()");
	if (url.indexOf("?") != -1)
		url += "&";
	else
		url += "?";
	url += "sysparm_domain_restore=false";
	if (url.indexOf("sysparm_nameofstack") == -1)
		url += "&sysparm_stack=no";
	if (snapToLastMousePosition) {
		if (lastMouseX - pWidth < 0) {
			lastMouseX = pWidth;
		}
		if (lastMouseY + pHeight > screen.height) {
			lastMouseY -= (lastMouseY + pHeight + 50) - screen.height;
		}
		lastMouseX -= pWidth;
		lastMouseY += 10;
		features += ",screenX=" + lastMouseX + ",left=" + lastMouseX + ",screenY=" + lastMouseY + ",top=" + lastMouseY;
	}
	if (closeOnLoseFocus) {
		var popupCurrent = window.open(url, name, features, false);
		if (!popupCurrent) {
			alert('Please disable your popup blocker to use this feature');
			return null;
		} else {
			popupCurrent.focus();
			popupCurrent.opener = window.self;
			return popupCurrent;
		}
	} else {
		var win = window.open(url, name, features, false);
		if (win) {
			win.focus();
			win.opener = window.self;
		}
		return win;
	}
}
;
;
/*! RESOURCE: /polaris-ui16-dependencies.js */
